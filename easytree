#include<stdio.h>
#include<stdlib.h>
struct binary_tree
{
	int data;
	binary_tree *left;
	binary_tree *right;
};
typedef struct binary_tree node;
node *tree;

void insert(node**tree, int val)
{
	node *temp = NULL;
	if(!(*tree))
	{
		temp = (node*)malloc(sizeof(node));
		temp->right  = temp->left = NULL;
		temp->data = val;
		*tree = temp;
		return ;
	}
	
	if(val < (*tree)->data)
	{
		insert(&(*tree)->left, val);
	}
	else if(val > (*tree)->data)
	{
		insert(&(*tree)->right, val);
	}
}
void deltree(node*tree)
{
	if(tree)
	{
		deltree(tree->right);
		deltree(tree->left);
		free(tree);
	}
}
void print_preorder(node*tree)
{
	if(tree)
	{
		printf("%d\n",tree->data );
		print_preorder(tree->left);
		print_preorder(tree->right);
	}
}
void print_inorder(node*tree)
{
	if(tree)
	{
		print_inorder(tree->left);
		printf("%d\n",tree->data );
		print_inorder(tree->right);
	}
}
void print_postorder(node*tree)
{
	if(tree)
	{
		print_postorder(tree->left);
		print_postorder(tree->right);
		printf("%d\n",tree->data );
	}
}
int main()
{
	node *root;
	node *tmp;
	
	root = NULL;
	int i,num;
	for(i=0;i<7;i++)
	{
		scanf("%d",&num);
		insert(&root,num);
	}
	print_preorder(root);
	print_inorder(root);
	print_postorder(root);
}
