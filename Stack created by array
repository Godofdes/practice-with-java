#include<stdio.h>

struct  StackRecord;
typedef struct StackRecord *Stack;

int IsEmpty(Stack S);
int IsFull(Stack S);
Stack CreateStack(Stack S);
void DisposeStack(Stack S);
void MakeEmpty(Stack S);
void Push(ElementType X, Stack S);
ElementType Top(Stack S);
void Pop(Stack S);
ElementType TopAndPop(Stack S);

struct StackRecord
{
	int Capacity;
	int TopOfStack;
	ElementType *Array;
}

Stack CreateStack(int MaxElements)
{
	Stack S;
	
	if(MaxElement < MinStackSize)
		printf("Stack size is too small");
	S = malloc(sizeof(struct StackRecord));
	if(S == NULL)
		printf("Out of space!!!");
	S->Array = malloc(sizeof(ElementType)*MaxElements);
	if(S->Array == NULL)
		printf("Out of space!!!");
	S->Capacity = MaxElements;
	MakeEmpty(S);
	
	return S;
}

void DisposeStack(Stack S)
{
	if(S !=NULL)
	{
		free(S->Array);
		free(S);
	}
}

int IsEmpty(Stack S)
{
	return S->TopOfStack == EmptyTOS;
}

void MakeEmpty(Stack S)
{
	S->TopOfStack = EmptyTOS;
}

void Push(ElementType X, Stack S)
{
	if(IsFull(S))
		printf("Full stack");
	else
		S->Array[++S->TopOfStack] = X;
}

ElementType Top(Stack S)
{
	if(!IsEmpty(S))
		returnS->Array[S->TopOfStack];
	else printf("Empty stack");
	return 0;
}
void Pop(Stack S)
{
	if(IsEmpty(S))
		printf("Empty stack");
	else
		S->TopOfStack--;
}
ElemrntType TopAndPop(Stack S)
{
	if(!IsEmpty(S))
		return S->Array[S->TopOfStack--];
	else printf("Empty stack");
	return 0;
}
int main()
{
	
} 
