#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>

typedef int ElementType;

typedef struct ListNode {
    ElementType  Element;
    ListNode* Next;
}Node, *PNode;


PNode CreateList(void) {
    int len ;
    int val ;
    PNode PHead = (PNode)malloc(sizeof(Node));
    if (PHead == NULL)
    {
        printf("空间分配失败 \n");
        exit(-1);
    }

    PNode PTail = PHead;
    PTail->Next = NULL;
    printf("请输入节点个数：");
    scanf("%d", &len);
    for (int i = 0; i < len; i++) {

        PNode PNew = (PNode)malloc(sizeof(Node));
        if (PNew == NULL) {
            printf("分配新节点失败\n");
            exit(-1);
        }
        printf("请输入第 %d 个节点的数据：", i + 1);
        scanf("%d", &val);

        PNew->Element = val;
        PTail->Next = PNew;
        PNew->Next = NULL;
        PTail = PNew;     
    }
    printf("创建链表成功\n");
    return PHead;
}


void TraverseList(PNode List) {
    PNode P = List->Next;
    printf("遍历链表的值为：");
    if (P == NULL)
        printf("链表为空");
    while (P != NULL)
    {
        printf("%d ", P->Element);
        P = P->Next;
    }
    printf("\n");
}


PNode FindList(PNode List) {
    PNode P = List->Next;
    int num = 0;
    int val = 0;
    printf("请输入要查询的数：");
    scanf("%d", &val); 
    while (P != NULL&&P->Element != val) {
        P = P->Next;
        ++num;
    }
    if (P != NULL)
        printf("找到的节点为：%d", num + 1);
    else
        printf("找不到该节点");
    printf("\n");
    return P;
}

void InsertList(PNode List, int pos, int val) {
    int position = 0;
    PNode P = List;

    while (P != NULL&&position<pos - 1)
    {
        P = P->Next;
        ++position;
    }
    PNode Tmp = (PNode)malloc(sizeof(Node));
    if (Tmp == NULL)
    {
        printf("内存分配失败！");
        exit(-1);
    }
    Tmp->Element = val;
    Tmp->Next = P->Next;
    P->Next = Tmp;
}


void DeleteTheList(PNode List) {
    PNode P, Tmp;
    P = List->Next;
    List->Next = NULL;
    while (P != NULL) {
        Tmp = P->Next;
        free(P);
        P = Tmp;
    }
    printf("删除链表成功！\n");
}

void DeleteList(PNode List, int pos) {
    int position = 0;
    PNode P = List;

    while (P != NULL&&position < pos - 1) {
        P = P->Next;
        ++position;
    }
    PNode Tmp = P->Next;
    P->Next = Tmp->Next;
    free(Tmp);
    Tmp = NULL;
}

int main() {
    PNode List = CreateList(); 
    TraverseList(List);
    FindList(List); 
    InsertList(List, 3, 100);
    TraverseList(List);
    DeleteList(List, 3);
    TraverseList(List);
    DeleteTheList(List);
    TraverseList(List);
    return 0;
}

